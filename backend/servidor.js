// Servidor principal del backend
// Configura Express, CORS, rutas y inicializa la base de datos
require('dotenv').config();
const express = require('express');
const cors = require('cors');

const rutasContenidos = require('./rutas/contenidos');
const rutasAuth = require('./rutas/autenticacion');
const rutasPerfiles = require('./rutas/perfiles');
const rutasReproduccion = require('./rutas/reproduccion');
const rutasMiLista = require('./rutas/miLista');
const rutasCalificaciones = require('./rutas/calificaciones');

const app = express();
// Habilita CORS para cualquier origen (ajustable en producción)
app.use(cors({ origin: '*' }));
// Parseo de JSON en cuerpo de peticiones
app.use(express.json());

// Inicializar BD (crear tablas si no existen)
const pool = require('./configuracion/basedatos');
async function inicializarBD() {
  try {
    // Detecta motor de BD actual para generar SQL compatible
    const esPg = pool.dbType === 'postgres';

    // usuarios
    // Crea tabla de usuarios con correo único y hash de clave
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS usuarios (
             id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
             correo VARCHAR(255) NOT NULL,
             clave_hash VARCHAR(255) NOT NULL,
             creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP
           );`
        : `CREATE TABLE IF NOT EXISTS usuarios (
             id INT AUTO_INCREMENT PRIMARY KEY,
             correo VARCHAR(255) NOT NULL,
             clave_hash VARCHAR(255) NOT NULL,
             creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             UNIQUE KEY uniq_correo (correo)
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );
    // índice único en correo (Postgres)
    if (esPg) {
      await pool.query(`CREATE UNIQUE INDEX IF NOT EXISTS uniq_correo ON usuarios(correo);`);
    }

    // perfiles
    // Perfiles por usuario con nombre y avatar opcional
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS perfiles (
             id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
             usuario_id INTEGER NOT NULL,
             nombre VARCHAR(100) NOT NULL,
             avatar VARCHAR(16),
             CONSTRAINT fk_perfiles_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
           );`
        : `CREATE TABLE IF NOT EXISTS perfiles (
             id INT AUTO_INCREMENT PRIMARY KEY,
             usuario_id INT NOT NULL,
             nombre VARCHAR(100) NOT NULL,
             avatar VARCHAR(16) NULL,
             FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );

    // progreso_visualizacion
    // Guarda el segundo actual de visualización por perfil y contenido
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS progreso_visualizacion (
             perfil_id INTEGER NOT NULL,
             tipo VARCHAR(16) NOT NULL,
             contenido_id VARCHAR(32) NOT NULL,
             segundo INTEGER NOT NULL,
             PRIMARY KEY (perfil_id, tipo, contenido_id),
             CONSTRAINT fk_progreso_perfil FOREIGN KEY (perfil_id) REFERENCES perfiles(id) ON DELETE CASCADE
           );`
        : `CREATE TABLE IF NOT EXISTS progreso_visualizacion (
             perfil_id INT NOT NULL,
             tipo VARCHAR(16) NOT NULL,
             contenido_id VARCHAR(32) NOT NULL,
             segundo INT NOT NULL,
             PRIMARY KEY (perfil_id, tipo, contenido_id),
             FOREIGN KEY (perfil_id) REFERENCES perfiles(id) ON DELETE CASCADE
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );

    // mi_lista
    // Lista personalizada por perfil con título y poster
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS mi_lista (
             perfil_id INTEGER NOT NULL,
             tipo VARCHAR(16) NOT NULL,
             contenido_id VARCHAR(32) NOT NULL,
             titulo VARCHAR(255) NOT NULL,
             poster VARCHAR(500),
             agregado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             PRIMARY KEY (perfil_id, tipo, contenido_id),
             CONSTRAINT fk_milista_perfil FOREIGN KEY (perfil_id) REFERENCES perfiles(id) ON DELETE CASCADE
           );`
        : `CREATE TABLE IF NOT EXISTS mi_lista (
             perfil_id INT NOT NULL,
             tipo VARCHAR(16) NOT NULL,
             contenido_id VARCHAR(32) NOT NULL,
             titulo VARCHAR(255) NOT NULL,
             poster VARCHAR(500) NULL,
             agregado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             PRIMARY KEY (perfil_id, tipo, contenido_id),
             FOREIGN KEY (perfil_id) REFERENCES perfiles(id) ON DELETE CASCADE
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );

    // calificaciones
    // Calificaciones con estrellas 0-5 por perfil y contenido
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS calificaciones (
             id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
             perfil_id INTEGER NOT NULL,
             contenido_id VARCHAR(64) NOT NULL,
             tipo VARCHAR(10) NOT NULL,
             estrellas INTEGER NOT NULL,
             fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             CONSTRAINT fk_calificaciones_perfil FOREIGN KEY (perfil_id) REFERENCES perfiles(id) ON DELETE CASCADE
           );`
        : `CREATE TABLE IF NOT EXISTS calificaciones (
             id INT AUTO_INCREMENT PRIMARY KEY,
             perfil_id INT NOT NULL,
             contenido_id VARCHAR(64) NOT NULL,
             tipo VARCHAR(10) NOT NULL,
             estrellas INT NOT NULL,
             fecha DATETIME DEFAULT CURRENT_TIMESTAMP,
             FOREIGN KEY (perfil_id) REFERENCES perfiles(id) ON DELETE CASCADE
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );

    // codigos_ingreso
    // Códigos de login sin contraseña (passwordless) por usuario/correo
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS codigos_ingreso (
             id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
             usuario_id INTEGER NOT NULL,
             correo VARCHAR(255) NOT NULL,
             codigo VARCHAR(12) NOT NULL,
             usado SMALLINT NOT NULL DEFAULT 0,
             expira_en TIMESTAMP NOT NULL,
             creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             CONSTRAINT fk_codigos_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
           );`
        : `CREATE TABLE IF NOT EXISTS codigos_ingreso (
             id INT AUTO_INCREMENT PRIMARY KEY,
             usuario_id INT NOT NULL,
             correo VARCHAR(255) NOT NULL,
             codigo VARCHAR(12) NOT NULL,
             usado TINYINT(1) NOT NULL DEFAULT 0,
             expira_en DATETIME NOT NULL,
             creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             INDEX idx_correo_codigo (correo, codigo),
             FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );
    if (esPg) {
      // Índice para búsqueda rápida de correo+codigo
      await pool.query(`CREATE INDEX IF NOT EXISTS idx_correo_codigo ON codigos_ingreso (correo, codigo);`);
    }

    // tokens_reset
    // Tokens para restablecer contraseña con expiración y uso
    await pool.query(
      esPg
        ? `CREATE TABLE IF NOT EXISTS tokens_reset (
             id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
             usuario_id INTEGER NOT NULL,
             correo VARCHAR(255) NOT NULL,
             token VARCHAR(64) NOT NULL,
             usado SMALLINT NOT NULL DEFAULT 0,
             expira_en TIMESTAMP NOT NULL,
             creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             CONSTRAINT fk_tokens_usuario FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
           );`
        : `CREATE TABLE IF NOT EXISTS tokens_reset (
             id INT AUTO_INCREMENT PRIMARY KEY,
             usuario_id INT NOT NULL,
             correo VARCHAR(255) NOT NULL,
             token VARCHAR(64) NOT NULL,
             usado TINYINT(1) NOT NULL DEFAULT 0,
             expira_en DATETIME NOT NULL,
             creado_en TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
             INDEX idx_token (token),
             FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
           ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;`
    );
    if (esPg) {
      // Índice para búsquedas de tokens
      await pool.query(`CREATE INDEX IF NOT EXISTS idx_token ON tokens_reset (token);`);
    }

    // Asegurar columnas/índices en instalaciones previas
    try { await pool.query(`ALTER TABLE usuarios ADD COLUMN IF NOT EXISTS clave_hash VARCHAR(255) NOT NULL`); } catch (e) {}
    if (!esPg) {
      try { await pool.query(`ALTER TABLE usuarios ADD UNIQUE KEY IF NOT EXISTS uniq_correo (correo)`); } catch (e) {}
    }
    console.log('Tabla usuarios verificada/creada.');
  } catch (e) {
    console.error('Error inicializando BD:', e.message);
  }
}

// Endpoint básico para comprobar estado del servidor
app.get('/estado', (req, res) => {
  res.json({ ok: true });
});

// Rutas
// Monta módulos de rutas por funcionalidad
app.use('/autenticacion', rutasAuth);
app.use('/perfiles', rutasPerfiles);
app.use('/contenidos', rutasContenidos);
app.use('/reproduccion', rutasReproduccion);
app.use('/mi-lista', rutasMiLista);
app.use('/calificaciones', rutasCalificaciones);

const PORT = process.env.PORT || 3000;
// Inicia servidor y ejecuta inicialización de BD
app.listen(PORT, async () => {
  await inicializarBD();
  console.log(`Servidor backend escuchando en puerto ${PORT}`);
});
